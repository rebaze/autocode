package com.rebaze.mystique;

import okio.*;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

import static com.rebaze.mystique.MutationBuilder.mutation;
import static okio.Okio.buffer;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'tonit' at '10/15/16 3:54 PM' with Gradle 3.1
 *
 * @author tonit, @date 10/15/16 3:54 PM
 */
public class Mystique
{
    private final File target;

    public Mystique(  File target )
    {
        System.out.println("    __  ___              __   _                   \n"
            + "   /  |/  /__  __ _____ / /_ (_)____ _ __  __ ___ \n"
            + "  / /|_/ // / / // ___// __// // __ `// / / // _ \\\n"
            + " / /  / // /_/ /(__  )/ /_ / // /_/ // /_/ //  __/\n"
            + "/_/  /_/ \\__, //____/ \\__//_/ \\__, / \\__,_/ \\___/ \n"
            + "        /____/                  /_/               ");

        this.target = target;
    }




    // Apply changes on disk or create patch
    // TODO: If source is a git repo and there are no pending changes, we can offer an in-place materialization.
    public void materialize( LocalUniverse universe ) throws FileNotFoundException
    {
        for ( MutableItem path : universe.getItems() )
        {
            if ( path.getTargetPath() != null )
            {
                File in = path.getUpdatedSource();
                File out = createOutput( path.getTargetPath());
                if (!out.getParentFile().exists()) {
                    out.getParentFile().mkdirs();
                }

                try (BufferedSource source = buffer( Okio.source( in )))
                {
                    try ( BufferedSink sink = buffer(Okio.sink( out ))) {
                        sink.writeAll( source );
                    }
                }
                catch ( IOException e )
                {
                    e.printStackTrace();
                }

                System.out.println("Would copy from " + in +  " to " + out);
            }
        }
    }

    private File createOutput( String path )
    {
        File f = new File(target,path);
        if (f.exists()) {
            //throw new IllegalStateException( "File " + f.getAbsolutePath() + " already exists. You have a conflict in your rule space." );
        }
        return f;
    }




}
