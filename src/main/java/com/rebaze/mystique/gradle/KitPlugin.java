/*
 * Copyright 2016 The Rebaze Way
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.rebaze.mystique.gradle;

import com.rebaze.mystique.Materializer;
import com.rebaze.mystique.MutationContext;
import com.rebaze.mystique.Universe;
import com.rebaze.mystique.gradle.BuildKitTask;
import com.rebaze.mystique.gradle.MystiqueExtension;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.Dependency;

import java.io.IOException;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'tonit' at '10/15/16 3:54 PM' with Gradle 3.1
 *
 * @author tonit, @date 10/15/16 3:54 PM
 */
public class KitPlugin implements Plugin<Project>
{

    public void exec(Universe input, MutationContext ctx, Materializer mat) throws IOException
    {
        ctx.applyTo( input );
        mat.materialize( input );
    }

    @Override public void apply( Project project )
    {

        System.out.println("    __  ___              __   _                   \n"
            + "   /  |/  /__  __ _____ / /_ (_)____ _ __  __ ___ \n"
            + "  / /|_/ // / / // ___// __// // __ `// / / // _ \\\n"
            + " / /  / // /_/ /(__  )/ /_ / // /_/ // /_/ //  __/\n"
            + "/_/  /_/ \\__, //____/ \\__//_/ \\__, / \\__,_/ \\___/ \n"
            + "        /____/                  /_/               ");


        project.getDependencies().components( handler -> {
            handler.all( detail -> {
                System.out.println("Dependency: " + detail.getId());
            } );
        } );

        MystiqueExtension ext = project.getExtensions().create("kit", MystiqueExtension.class, project);
        project.getLogger().info( "Created extension: " + ext );

        if (project.getConfigurations().findByName("kit") == null) {
            Configuration config = project.getConfigurations().create("kit");
            project.getLogger().info( "Created configuration: " + config );
        }else {
            project.getLogger().info("Found existing configurations: " + project.getConfigurations().getByName( "kit" ));
        }

        project.getTasks().create( "kit", BuildKitTask.class );

    }




}
